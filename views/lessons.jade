extends layout
	
block content
	h1= title

	#instructions.col-sm-12.col-md-6

	#exercises.col-sm-12.col-md-6
		#editor-panels
				ul#editor-tabs.nav.nav-tabs
				#editor-buffers.tab-content

		#exercise-links.btn-toolbar
			.btn-group
				button.btn.btn-default 提示

			.btn-group.pull-right
				button#commit.btn.btn-success(title="修改代码后再尝试提交") 提交
				button.btn.btn-default 下一个

		#output-panels
			ul.nav.nav-tabs
				li.active
					a(data-target="terminal") 控制台
			.tab-content
				.tab-pane.fade.active.in#terminal
	link(rel='stylesheet', href='/javascripts/codemirror/lib/codemirror.css', media="all")
	link(rel='stylesheet', href='/javascripts/codemirror/theme/solarized.css', media="all")
	script(type="text/javascript", src="/javascripts/codemirror/lib/codemirror.js")
	script(type="text/javascript", src="/javascripts/codemirror/addon/mode/loadmode.js")
	script(type="text/javascript", src="/javascripts/codemirror/addon/search/searchcursor.js")
	script(type="text/javascript", src="/javascripts/codemirror/mode/meta.js")
	script(type="text/javascript", src="/javascripts/jquery-ui-1.10.3.custom.min.js")
	script(type='text/javascript').
		var exercises = JSON.parse( !{JSON.stringify(exedb)} );
		var exercise = exercises[2]
		var mimelookup = {
			".c":"text/x-csrc",
			".h":"text/x-csrc",
			".cpp":"text/x-c++src",
			".hpp":"text/x-c++src",
			".css":"text/css",
			".java":"text/x-java",
			".js":"text/javascript",
			".json":"application/x-json",
			".html":"text/html",
			".md":"text/x-markdown",
			".lua":"text/x-lua"
		}

		function getMode(filename)
		{
			var ext = /\.[^.\\/]+$/.exec(filename);
			var mime = null
			if (!ext)
				return null

			mime = mimelookup[ext]

			if (!mime)
				return null

			for (var i = 0; i < CodeMirror.modeInfo.length; i++)
			{
				if (CodeMirror.modeInfo[i].mime == mime)
					return CodeMirror.modeInfo[i];
			}
			return null
		}


		function setupPlaceholders(e) {
			var pattern = /\/\*\/\/[^*]*?\/\/\*\//;
			var editor = e;

			if (editor.getOption("readOnly"))
				return;

			
			function createPlaceholderElement(e) {
					var span = document.createElement("span");
					span.appendChild(document.createTextNode("(" + e.replace("/*//", "").replace("//*/", "") + ")"))
					span.className = "CodeMirror-autoplace"
					return span
			}

			function createPlaceholder(e, cursor) {
					if (e.findMarksAt(cursor.from()).length)
						return;

					var elt = createPlaceholderElement(e.getRange(cursor.from(), cursor.to()))
					var tm = e.markText(cursor.from(), cursor.to(), {replacedWith: elt, clearOnEnter: true, lastRange:{}})

					CodeMirror.on(elt, "mousedown", function () {tm.clear()})

					function unhide() {
						var r = e.getRange(tm.lastRange.from, tm.lastRange.to)
						if (r.match(pattern) === null) {
							e.replaceRange("", tm.lastRange.from, {line: tm.lastRange.to.line, ch: tm.lastRange.to.ch - 1})
						}
						else {
							e.replaceRange("", tm.lastRange.from, tm.lastRange.to)
						}
						e.focus();
						e.setCursor(tm.lastRange.from);
					}
					CodeMirror.on(tm, "unhide", unhide)
					CodeMirror.on(tm, "clear", function(from, to){
						tm.lastRange.from = from;
						tm.lastRange.to = to;
						unhide();
					})
			}
			var cursor = editor.getSearchCursor(pattern)
			while (cursor.findNext())
				createPlaceholder(editor, cursor);

			editor.on("change", function (editor) {
					var n = [];
					var cursor = editor.getSearchCursor(pattern);
					while (cursor.findNext())
						n.push(createPlaceholder(editor, cursor));
					return n;
			})
		}


		var sources = []
		// 
		$('#instructions')
			.append('<h1>'+exercise.title+'</h1>')
			.append(exercise.instructions)

		// editors
		var current = 0 // current editor index
		var files = exercise.files
		for (var i=0;i <files.length; i++){
			var file = files[i]
			var id = "editor-buffer-"+i
			sources.push({name:file.name})
			$('#editor-tabs').append("<li><a data-target=\"#"+id+"\">"+file.name+"</a></li>")
			$('#editor-buffers').append(
				"<div id=\""+id+"\" class=\"tab-pane fade\"><textarea class=\"editor\">"+file.initial_value+"</textarea></div>"
			)
		}

		$('#editor-tabs :first-child').addClass('active')
		$('#editor-buffers :first-child').addClass('active in')
		$(".nav-tabs a").click(function(e){
			$(this).tab('show');
			current = $(this).attr('data-target').match(/\d+/);
		})
		var editors = []
		CodeMirror.modeURL = "/javascripts/codemirror/mode/%N/%N.js";
		$(".editor").each(function(index){
			var editor = CodeMirror.fromTextArea(this, {lineNumbers:true, theme:"solarized dark"});

			var mi = getMode(files[index].name);
			if (mi){
				CodeMirror.autoLoadMode(editor, mi.mode);
				editor.setOption('mode', mi.mime);
			}
			setupPlaceholders(editor);
			editors.push(editor);
		});

		var posted = false;
		$('#commit').click(function(){
			if (posted)
				return;

			// check if all widget have been filled.
			$(".CodeMirror-widget").each(function(index){
				$(this)
					.addClass('hilight', 100)
					.removeClass('hilight', 100)
					.addClass('hilight', 100)
					.removeClass('hilight', 100)
					.addClass('hilight', 100)
					.removeClass('hilight', 100)
						;
			})
			
			if ($(".CodeMirror-widget").length > 0)
				return;

			posted = true;

			for (var i = 0; i < editors.length; i++)
			{
				sources[i].content = editors[i].getDoc().getValue()
			}

			var lastTop = 0
			$.post('/build', {sources:sources}, function(res){
				var terminal = $('#terminal')
				function appendConsole() {
					var lines = res.outputs.split(/\r\n|\r|\n/).length
					terminal.append('<pre class="active black" data-lines="'+lines+'">'+res.outputs+'</pre>');
					var s = terminal.prop("scrollHeight") - terminal.height()
					terminal.animate({ scrollTop: s}, 300, function(){
						terminal.children('pre:last-child').removeClass('black', 100);
						posted = false;
					});
				}
				var last = terminal.children('pre:last-child')
				if (last.length > 0)
					last.removeClass('active', last.data('lines')*100, appendConsole);
				else
					appendConsole();
			});
		});
